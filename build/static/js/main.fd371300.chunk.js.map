{"version":3,"sources":["serviceWorker.js","asset/component/views/Page.js","asset/component/headerComponent/Header.js","asset/component/views/Home.js","asset/component/views/MakeRequest.js","asset/component/headerComponent/Nav.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Page","_ref","children","color","cx","classNames","page","page--prev","prev","react_default","a","createElement","className","style","defaultProps","background","withRouter","Header","Component","Home","views_Page","Header_Header","MakeRequest","Nav","Link_default","to","pathname","supportsHistory","history","App","react_router_dom","forceRefresh","Nav_Nav","react_router","render","TransitionGroup","CSSTransition","key","timeout","enter","exit","exact","path","component","ReactDOM","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fd371300.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.register().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { withRouter } from 'react-router-dom';\n\nfunction Page({ \n  children, \n  color, \n  // background,\n  location: {\n    state,\n  },\n}) {\n  const cx = classNames({\n    page: true,\n    'page--prev': state && state.prev,\n  });\n  return (\n    <section \n      className={cx}\n      style={{\n        color,\n        // background,\n      }}\n    >\n      {children}\n    </section>\n  );\n}\n\nPage.propTypes = {\n  children: PropTypes.node.isRequired,\n  color: PropTypes.string,\n  background: PropTypes.string,\n};\n\nPage.defaultProps = {\n  color: '#fff',\n  background: '#223',\n};\n\nexport default withRouter(Page);","import React, { Component } from 'react'\n// import Carousel from './carousel/Carousel'\n\n\nexport default class Header extends Component {\n    render() {\n        return (\n            \n           <header className = \"bg-image\">\n            <div className = \"heading-wrap\">\n            <div className = \"heading-primary\">\n            <h1>Discover <br/>Ghana</h1>\n            </div>\n            </div>\n           </header>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Page from './Page';\n// import Card from '../cardui/Card'\nimport Header from '../headerComponent/Header'\n\nexport default class Home extends Component {\n    render() {\n        return (\n           <Page>\n           <Header/>\n           </Page>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Page from './Page'\n\nexport default class MakeRequest extends Component {\n    render() {\n        return (\n            <Page color=\"#cc99ff\" background=\"#280051\">\n            <h1>About</h1>\n      \n            <p>Toffee muffin bear claw ice cream gummies jujubes gingerbread. Apple pie bonbon pastry chocolate bar bear claw wafer bonbon. Marzipan topping wafer topping cake liquorice.</p>\n            <p>Wafer bonbon cupcake chocolate bar. Bear claw topping halvah chocolate bar gummi bears. Powder bonbon oat cake chocolate cupcake pudding pudding pastry cheesecake.</p>\n            <p>Toffee sweet soufflé danish. Lemon drops gummies fruitcake pudding tootsie roll pastry apple pie biscuit. Muffin gingerbread dessert marshmallow lemon drops chocolate bar jelly-o marzipan.</p>\n            <p>Gingerbread candy gingerbread dessert icing oat cake bonbon. Carrot cake jujubes halvah candy jelly beans sugar plum chocolate bar. Cotton candy carrot cake pudding carrot cake powder. Brownie toffee topping jujubes.</p>\n            <p>Cotton candy apple pie soufflé jelly-o pudding chocolate cake carrot cake. Dessert croissant carrot cake gummi bears donut icing cookie. Dessert chocolate cake pastry toffee tiramisu cookie.</p>\n      \n          </Page>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Link from 'react-router-dom/Link';\n\nexport default class Nav extends Component {\n    render() {\n        return (\n            <nav className=\"nav\">\n            <Link \n              to={{\n                pathname: '/',\n                state: { prev: false },\n              }} \n              className=\"nav__link\"\n            >\n              Home\n            </Link>\n            <Link \n              to={{\n                pathname: '/make request',\n                state: { prev: true },\n              }}\n              className=\"nav__link\"\n            >\n              make request\n            </Link>\n          </nav>\n            \n        )\n    }\n}\n","import React from 'react';\nimport * as serviceWorker from './serviceWorker'\n\n// import Foot from './asset/component/footerComponent/Foot'\nimport Home from './asset/component/views/Home'\nimport MakeRequest from './asset/component/views/MakeRequest'\nimport Nav from './asset/component/headerComponent/Nav'\n\n\nimport './asset/css/main.css'\n\n\nimport { \n  Route, \n  Switch, \n  BrowserRouter,\n} from 'react-router-dom';\nimport { \n  CSSTransition, \n  TransitionGroup \n} from 'react-transition-group';\n\n\n\nconst supportsHistory = 'pushState' in window.history;\n\n\nconst App = () => (\n  <BrowserRouter forceRefresh={!supportsHistory}>\n     \n      <Nav />\n      <main>\n        <Route\n          render={({ location }) => {\n            const { pathname } = location;\n            return (\n              <TransitionGroup>\n                <CSSTransition \n                  key={pathname}\n                  classNames=\"page\"\n                  timeout={{\n                    enter: 1000,\n                    exit: 1000,\n                  }}\n                >\n                  <Route\n                    location={location}\n                    render={() => (\n                      <Switch>\n                        <Route\n                          exact\n                          path=\"/\"\n                          component={Home}\n                        />\n                        <Route\n                          path=\"/make request\"\n                          component={MakeRequest}\n                        />\n                       \n                      </Switch>\n                    )}\n                  />\n                </CSSTransition>\n              </TransitionGroup>\n            );\n          }}\n        />\n      </main>\n  \n  </BrowserRouter>\n);\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}